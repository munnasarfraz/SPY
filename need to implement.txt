import pandas as pd
from tqdm import tqdm

def compare_csvs(df1, df2, file_name, csv_columns=None, csv_primary_keys=None):
    summary = {
        'Missing Columns in File2': [],
        'Missing Columns in File1': [],
        'Missing Rows in File2': 0,
        'Extra Rows in File2': 0,
        'Duplicate Rows in File1': 0,
        'Duplicate Rows in File2': 0,
        'Total Fields Compared': 0,
        'Number of Discrepancies': 0,
        'Failure %': 0.0,
        'Pass %': 0.0
    }
    diff_summary = []

    # If column filter is provided, apply it to both
    if csv_columns:
        # Intersect with actual columns to prevent KeyErrors
        df1_cols = [col for col in csv_columns if col in df1.columns]
        df2_cols = [col for col in csv_columns if col in df2.columns]
        df1 = df1[df1_cols]
        df2 = df2[df2_cols]

    # Quick equality check
    if df1.equals(df2):
        summary['Note'] = '✅ Files are identical — no comparison needed'
        return pd.DataFrame(), summary

    # Identify missing columns
    summary['Missing Columns in File2'] = list(set(df1.columns) - set(df2.columns))
    summary['Missing Columns in File1'] = list(set(df2.columns) - set(df1.columns))
    common_columns = list(set(df1.columns).intersection(set(df2.columns)))

    # Bail if nothing in common
    if not common_columns:
        summary['Note'] = '❌ No common columns to compare'
        return pd.DataFrame(), summary

    # Drop rows with missing primary key values
    if csv_primary_keys:
        df1 = df1.dropna(subset=csv_primary_keys)
        df2 = df2.dropna(subset=csv_primary_keys)
    else:
        summary['Note'] = '❌ Primary key(s) not provided'
        return pd.DataFrame(), summary

    # Add original row number BEFORE setting index
    df1['_original_row'] = range(1, len(df1) + 1)
    df2['_original_row'] = range(1, len(df2) + 1)

    # Set index using primary keys but retain original columns
    df1.set_index(csv_primary_keys, inplace=True, drop=False)
    df2.set_index(csv_primary_keys, inplace=True, drop=False)

    # Detect duplicates and remove them
    summary['Duplicate Rows in File1'] = df1.index.duplicated().sum()
    summary['Duplicate Rows in File2'] = df2.index.duplicated().sum()
    df1 = df1[~df1.index.duplicated()]
    df2 = df2[~df2.index.duplicated()]

    # Row-level presence checks
    summary['Missing Rows in File2'] = len(df1.index.difference(df2.index))
    summary['Extra Rows in File2'] = len(df2.index.difference(df1.index))

    # Only compare rows that exist in both
    common_idx = df1.index.intersection(df2.index)

    # Select valid columns (including _original_row if present)
    extra_cols = ['_original_row']
    df1_common_cols = [col for col in common_columns + extra_cols if col in df1.columns]
    df2_common_cols = [col for col in common_columns + extra_cols if col in df2.columns]

    df1_common = df1.loc[common_idx, df1_common_cols]
    df2_common = df2.loc[common_idx, df2_common_cols]

    # Compare only common data columns
    comparison_columns = [col for col in common_columns if col in df1_common.columns and col in df2_common.columns]
    comparison = df1_common[comparison_columns] != df2_common[comparison_columns]
    mismatch_locs = comparison.stack()

    # Create mismatch details
    if not mismatch_locs.empty:
        for (idx, col), is_mismatch in tqdm(mismatch_locs.items(), desc=f"Comparing rows: {file_name}", unit="mismatch", leave=False):
            val1 = df1_common.at[idx, col]
            val2 = df2_common.at[idx, col]
            row1_num = df1_common.at[idx, '_original_row'] if '_original_row' in df1_common.columns else None
            row2_num = df2_common.at[idx, '_original_row'] if '_original_row' in df2_common.columns else None
            diff_summary.append({
                'PrimaryKey': idx,
                'Column': col,
                'File1_Value': val1,
                'File2_Value': val2,
                'RowNum_File1': row1_num,
                'RowNum_File2': row2_num,
                'Status': 'Mismatch'
            })

    total_fields = len(common_idx) * len(comparison_columns)
    mismatches = len(diff_summary)

    summary['Total Fields Compared'] = total_fields
    summary['Number of Discrepancies'] = mismatches
    summary['Failure %'] = round((mismatches / total_fields) * 100, 2) if total_fields else 0.0
    summary['Pass %'] = round(100 - summary['Failure %'], 2) if total_fields else 0.0

    if mismatches == 0 and summary['Missing Rows in File2'] == 0 and summary['Extra Rows in File2'] == 0:
        summary['Note'] = '✅ No comparison issues, files are identical'

    return pd.DataFrame(diff_summary), summary
--------------------------------------
Traceback (most recent call last):                                                           
  File "/usr/lib/python3.12/runpy.py", line 198, in _run_module_as_main
    return _run_code(code, main_globals, None,
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/runpy.py", line 88, in _run_code
    exec(code, run_globals)
  File "/home/ubuntu/.vscode-server/extensions/ms-python.debugpy-2025.6.0-linux-x64/bundled/libs/debugpy/adapter/../../debugpy/launcher/../../debugpy/__main__.py", line 71, in <module>
    cli.main()
  File "/home/ubuntu/.vscode-server/extensions/ms-python.debugpy-2025.6.0-linux-x64/bundled/libs/debugpy/adapter/../../debugpy/launcher/../../debugpy/../debugpy/server/cli.py", line 501, in main
    run()
  File "/home/ubuntu/.vscode-server/extensions/ms-python.debugpy-2025.6.0-linux-x64/bundled/libs/debugpy/adapter/../../debugpy/launcher/../../debugpy/../debugpy/server/cli.py", line 351, in run_file
    runpy.run_path(target, run_name="__main__")
  File "/home/ubuntu/.vscode-server/extensions/ms-python.debugpy-2025.6.0-linux-x64/bundled/libs/debugpy/_vendored/pydevd/_pydevd_bundle/pydevd_runpy.py", line 310, in run_path
    return _run_module_code(code, init_globals, run_name, pkg_name=pkg_name, script_name=fname)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/ubuntu/.vscode-server/extensions/ms-python.debugpy-2025.6.0-linux-x64/bundled/libs/debugpy/_vendored/pydevd/_pydevd_bundle/pydevd_runpy.py", line 127, in _run_module_code
    _run_code(code, mod_globals, init_globals, mod_name, mod_spec, pkg_name, script_name)
  File "/home/ubuntu/.vscode-server/extensions/ms-python.debugpy-2025.6.0-linux-x64/bundled/libs/debugpy/_vendored/pydevd/_pydevd_bundle/pydevd_runpy.py", line 118, in _run_code
    exec(code, run_globals)
  File "/home/ubuntu/development_sarfarz/csv_comparision_v3.py", line 566, in <module>
    diff_df, summary, list_files = run_comparison()
                                   ^^^^^^^^^^^^^^^^
  File "/home/ubuntu/development_sarfarz/csv_comparision_v3.py", line 540, in run_comparison
    results = list(executor.map(process_pair, common_csvs))
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/concurrent/futures/_base.py", line 619, in result_iterator
    yield _result_or_cancel(fs.pop())
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/concurrent/futures/_base.py", line 317, in _result_or_cancel
    return fut.result(timeout)
           ^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/concurrent/futures/_base.py", line 456, in result
    return self.__get_result()
           ^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/concurrent/futures/_base.py", line 401, in __get_result
    raise self._exception
  File "/usr/lib/python3.12/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/ubuntu/development_sarfarz/csv_comparision_v3.py", line 528, in process_pair
    result = csv_name, *compare_csvs(df1, df2, file1)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/ubuntu/development_sarfarz/csv_comparision_v3.py", line 198, in compare_csvs
    for (idx, col), is_mismatch in tqdm(mismatch_locs.items(), desc=f"Comparing rows: {file_name}", unit="mismatch", leave=False):
        ^^^^^^^^^^
ValueError: too many values to unpack (expected 2)


0000000000000000000000000000000
for item in tqdm(mismatch_locs.items(), desc=f"Comparing rows: {file_name}", unit="mismatch", leave=False):
    if isinstance(item[0], tuple) and len(item[0]) == 2:
        idx, col = item[0]
    else:
        # Fallback in case index is not a tuple — shouldn't usually happen
        idx, col = item[0], 'Unknown'

    val1 = df1_common.at[idx, col] if col in df1_common.columns else None
    val2 = df2_common.at[idx, col] if col in df2_common.columns else None
    row1_num = df1_common.at[idx, '_original_row'] if '_original_row' in df1_common.columns else None
    row2_num = df2_common.at[idx, '_original_row'] if '_original_row' in df2_common.columns else None
    diff_summary.append({
        'PrimaryKey': idx,
        'Column': col,
        'File1_Value': val1,
        'File2_Value': val2,
        'RowNum_File1': row1_num,
        'RowNum_File2': row2_num,
        'Status': 'Mismatch'
    })

