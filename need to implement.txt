import boto3
import pandas as pd
import io
import zipfile
import os
import re
import configparser
from tqdm import tqdm
from datetime import datetime
from concurrent.futures import ThreadPoolExecutor, as_completed
import html
import logging
from tqdm.contrib.concurrent import thread_map
from multiprocessing import Manager
# --- CONFIG LOADING ---
config = configparser.ConfigParser()
config.read('config.ini')

project_name = config['settings']['project_name']
project_logo = config['settings']['project_logo']
output_dir = config['report']['output_dir']
output_file = config['report']['output_file']
csv_primary_keys = config['keys']['primary_key_columns'].split(',')
csv_columns = config['keys']['columns']
if csv_columns: csv_columns = csv_columns.split(',')

bucket_name = config['aws']['bucket_name']
source_1_prefix = config['aws']['source_1_prefix']
source_2_prefix = config['aws']['source_2_prefix']
use_multithreading_reading = config['threading'].getboolean('use_multithreading_reading')
use_multithreading_comparision = config['threading'].getboolean('use_multithreading_comparision')

#[report_custom]
include_passed = config['report_custom']['include_passed']
include_missing_files = config['report_custom']['include_missing_files']

timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
base_name, ext = os.path.splitext(output_file)
output_file = os.path.join(output_dir, f"{base_name}_{timestamp}{ext or '.html'}")
os.makedirs(output_dir, exist_ok=True)
os.makedirs(output_dir+'_logs', exist_ok=True)

# ------------------ LOGGING ------------------
# Configure logger
logger = logging.getLogger('ComparisonLogger')
logger.setLevel(logging.DEBUG)
log_handler = logging.FileHandler(f"{output_dir}_logs/comparison_{timestamp}.log")
log_handler.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
log_handler.setFormatter(formatter)
logger.addHandler(log_handler)


# ------------------ DELETE OLD FILES ------------------
    # Delete all files in the local ZIP download directory
def delete_downloaded_files(path):
    if os.path.exists(path):
        logger.info(f"Deleting all ZIP files in: {path}")
        for filename in os.listdir(path):
            file_path = os.path.join(path, filename)
            if os.path.isfile(file_path):
                os.remove(file_path)
    logger.info(f"Deleting all ZIP files in: {path}")

delete_downloaded_files('downloads/source1')
delete_downloaded_files('downloads/source2')


def normalize_filename(filename):
    return re.sub(r'\d{8}_\d{4}', '', filename)

# --- AWS & FILE FUNCTIONS ---
def get_s3_client(profile_name='p3-dev'):
    session = boto3.session.Session(profile_name=profile_name)
    return session.client('s3')

s3 = get_s3_client()

def list_zip_files(prefix):
    response = s3.list_objects_v2(Bucket=bucket_name, Prefix=prefix)
    return [item['Key'] for item in response.get('Contents', []) if item['Key'].endswith('.zip')]

def download_zip_from_s3(zip_key, local_dir):
    os.makedirs(local_dir, exist_ok=True)
    local_path = os.path.join(local_dir, os.path.basename(zip_key))
    if not os.path.exists(local_path):
        s3.download_file(Bucket=bucket_name, Key=zip_key, Filename=local_path)
    return local_path

def list_csvs_in_local_zip(zip_path):
    with zipfile.ZipFile(zip_path, 'r') as zf:
        return [name for name in zf.namelist() if name.endswith('.csv')]

def read_csv_from_local_zip(zip_path, csv_name):
    with zipfile.ZipFile(zip_path, 'r') as zf:
        with zf.open(csv_name) as f:
            return pd.read_csv(f, low_memory=False)

# --- BUILD MAP OF CSV TO ZIP ---
def build_csv_to_zip_map(zip_keys, local_dir, csv_map):
    for zip_key in tqdm(zip_keys, desc=f"Downloading & indexing", unit="zip"):
        try:
            local_zip = download_zip_from_s3(zip_key, local_dir)
            for csv_file in list_csvs_in_local_zip(local_zip):
                normalized = normalize_filename(csv_file)
                if normalized not in csv_map:
                    csv_map[normalized] = (local_zip, csv_file)
                else:
                    # print(f"⚠️ Duplicate CSV {normalized} already exists.")
                    logger.info(f" ⚠️ Duplicate CSV {normalized} already exists.")
        except Exception as e:
            # print(f"❌ Failed to process {zip_key}: {e}")
            logger.info(f"❌ Failed to process {zip_key}: {e}")

# --- COMPARISON FUNCTION ---
def compare_csvs(df1, df2, file_name):
    summary = {
        'Missing Columns in File2': [],
        'Missing Columns in File1': [],
        'Missing Rows in File2': 0,
        'Extra Rows in File2': 0,
        'Duplicate Rows in File1': 0,
        'Duplicate Rows in File2': 0,
        'Total Fields Compared': 0,
        'Number of Discrepancies': 0,
        'Failure %': 0.0,
        'Pass %': 0.0
    }
    diff_summary = []

    # If column filter is provided, apply it to both
    if csv_columns:
        # Intersect with actual columns to prevent KeyErrors
        df1_cols = [col for col in csv_columns if col in df1.columns]
        df2_cols = [col for col in csv_columns if col in df2.columns]
        df1 = df1[df1_cols]
        df2 = df2[df2_cols]

    # Quick equality check
    if df1.equals(df2):
        summary['Note'] = '✅ Files are identical — no comparison needed'
        return pd.DataFrame(), summary

    # Identify missing columns
    summary['Missing Columns in File2'] = list(set(df1.columns) - set(df2.columns))
    summary['Missing Columns in File1'] = list(set(df2.columns) - set(df1.columns))
    common_columns = list(set(df1.columns).intersection(set(df2.columns)))

    # Bail if nothing in common
    if not common_columns:
        summary['Note'] = '❌ No common columns to compare'
        return pd.DataFrame(), summary

    # Drop rows with missing primary key values
    if csv_primary_keys:
        df1 = df1.dropna(subset=csv_primary_keys)
        df2 = df2.dropna(subset=csv_primary_keys)
    else:
        summary['Note'] = '❌ Primary key(s) not provided'
        return pd.DataFrame(), summary

    # Add original row number BEFORE setting index
    df1['_original_row'] = range(1, len(df1) + 1)
    df2['_original_row'] = range(1, len(df2) + 1)

    # Set index using primary keys but retain original columns
    df1.set_index(csv_primary_keys, inplace=True, drop=False)
    df2.set_index(csv_primary_keys, inplace=True, drop=False)

    # Detect duplicates and remove them
    summary['Duplicate Rows in File1'] = df1.index.duplicated().sum()
    summary['Duplicate Rows in File2'] = df2.index.duplicated().sum()
    df1 = df1[~df1.index.duplicated()]
    df2 = df2[~df2.index.duplicated()]

    # Row-level presence checks
    summary['Missing Rows in File2'] = len(df1.index.difference(df2.index))
    summary['Extra Rows in File2'] = len(df2.index.difference(df1.index))

    # Only compare rows that exist in both
    common_idx = df1.index.intersection(df2.index)

    # Select valid columns (including _original_row if present)
    extra_cols = ['_original_row']
    df1_common_cols = [col for col in common_columns + extra_cols if col in df1.columns]
    df2_common_cols = [col for col in common_columns + extra_cols if col in df2.columns]

    df1_common = df1.loc[common_idx, df1_common_cols]
    df2_common = df2.loc[common_idx, df2_common_cols]

    # Compare only common data columns
    comparison_columns = [col for col in common_columns if col in df1_common.columns and col in df2_common.columns]
    comparison = df1_common[comparison_columns] != df2_common[comparison_columns]
    mismatch_locs = comparison.stack()

    # Create mismatch details
    if not mismatch_locs.empty:
        for item in tqdm(mismatch_locs.items(), desc=f"Comparing rows: {file_name}", unit="mismatch", leave=False):
            if isinstance(item[0], tuple) and len(item[0]) == 2:
                idx, col = item[0]
            else:
                # Fallback in case index is not a tuple — shouldn't usually happen
                idx, col = item[0], 'Unknown'

            val1 = df1_common.at[idx, col] if col in df1_common.columns else None
            val2 = df2_common.at[idx, col] if col in df2_common.columns else None
            row1_num = df1_common.at[idx, '_original_row'] if '_original_row' in df1_common.columns else None
            row2_num = df2_common.at[idx, '_original_row'] if '_original_row' in df2_common.columns else None
            diff_summary.append({
                'PrimaryKey': idx,
                'Column': col,
                'File1_Value': val1,
                'File2_Value': val2,
                'RowNum_File1': row1_num,
                'RowNum_File2': row2_num,
                'Status': 'Mismatch'
            })

    total_fields = len(common_idx) * len(comparison_columns)
    mismatches = len(diff_summary)

    summary['Total Fields Compared'] = total_fields
    summary['Number of Discrepancies'] = mismatches
    summary['Failure %'] = round((mismatches / total_fields) * 100, 2) if total_fields else 0.0
    summary['Pass %'] = round(100 - summary['Failure %'], 2) if total_fields else 0.0

    if mismatches == 0 and summary['Missing Rows in File2'] == 0 and summary['Extra Rows in File2'] == 0:
        summary['Note'] = '✅ No comparison issues, files are identical'

    return pd.DataFrame(diff_summary), summary

def is_numeric(val):
    try:
        float(val)
        return True
    except (ValueError, TypeError):
        return False
    
def generate_html_report(
    diff_df, 
    summary, 
    report_start_time, 
    output_file,
    source_files_count, 
    destination_files_count, 
    primary_key_columns,
    columns=None, 
    project_name="CSV Comparator",
    project_logo="",
    include_passed=False,
    include_missing_files=False
):
    report_end_time = datetime.now()
    time_taken = report_end_time - report_start_time
    time_taken_str = str(time_taken).split('.')[0]  # HH:MM:SS

    comparison_rows = ""

    total_fields_compared = 0
    total_discrepancies = 0
    total_missing_files = 0
    total_missing_rows = 0
    total_extra_rows = 0
    total_different_rows = 0

    pass_percent_list = []
    fail_percent_list = []

    for csv_file, file_summary in tqdm(summary.items(), desc="Generating report"):
        if csv_file in ["Missing CSVs in Source2", "Extra CSVs in Source2"]:
            continue

        file_diff_df = diff_df[diff_df['File'] == csv_file] if not diff_df.empty else pd.DataFrame()
        match_status = "Mismatch" if not file_diff_df.empty else "Match"

        if match_status == "Match" and not include_passed:
            continue  # Skip matched files if flag is off

        icon = "<i class='fas fa-check-circle' style='color:green;'></i>" if match_status == "Match" else "<i class='fas fa-times-circle' style='color: red;'></i>"

        fields = file_summary.get('Total Fields Compared', 0)
        discrepancies = file_summary.get('Number of Discrepancies', 0)
        pass_percent = file_summary.get('Pass %', 0.0)
        fail_percent = file_summary.get('Failure %', 0.0)

        if fields:
            total_fields_compared += fields
            total_discrepancies += discrepancies
            pass_percent_list.append(pass_percent)
            fail_percent_list.append(fail_percent)

        if match_status == "Mismatch":
            total_different_rows += discrepancies

        total_missing_rows += file_summary.get('Missing Rows in File2', 0)
        total_extra_rows += file_summary.get('Extra Rows in File2', 0)

        # Group rows by PrimaryKey
        last_primary_key = None
        primary_key_start_index = None
        rowspan = 1
        diff_table_rows = []

        for idx, row in file_diff_df.iterrows():
            if last_primary_key is None or row['PrimaryKey'] != last_primary_key:
                if primary_key_start_index is not None:
                    diff_table_rows[primary_key_start_index] = diff_table_rows[primary_key_start_index].replace('ROWSPAN_PLACEHOLDER', f'rowspan="{rowspan}"')

                last_primary_key = row['PrimaryKey']
                primary_key_start_index = len(diff_table_rows)
                rowspan = 1

                diff_table_rows.append(f"""
                    <tr>
                        <td ROWSPAN_PLACEHOLDER>{html.escape(str(row['PrimaryKey']))} <br> [Engine Row_Number: {html.escape(str(row['RowNum_File1']))} - Neoprice Row_Number: {html.escape(str(row['RowNum_File2']))} ]</td>
                        <td>{html.escape(str(row['Column']))}</td>
                        <td>{html.escape(str(row['File1_Value']))} </td>
                        <td>{html.escape(str(row['File2_Value']))} </td>
                        <td>{round(float(row['File1_Value']) - float(row['File2_Value']), 4) if is_numeric(row['File1_Value']) and is_numeric(row['File2_Value']) else ''}</td>
                    </tr>
                """)
            else:
                rowspan += 1
                diff_table_rows.append(f"""
                    <tr>
                        <td>{html.escape(str(row['Column']))}</td>
                        <td>{html.escape(str(row['File1_Value']))} </td>
                        <td>{html.escape(str(row['File2_Value']))} </td>
                        <td>{round(float(row['File1_Value']) - float(row['File2_Value']), 4) if is_numeric(row['File1_Value']) and is_numeric(row['File2_Value']) else ''}</td>
                    </tr>
                """)

        if primary_key_start_index is not None:
            diff_table_rows[primary_key_start_index] = diff_table_rows[primary_key_start_index].replace('ROWSPAN_PLACEHOLDER', f'rowspan="{rowspan}"')

        diff_table = "".join(diff_table_rows)

        if match_status == "Mismatch":
            mismatch_details = f"""
                <div>
                    <button class="toggle-button" onclick="toggleVisibility('diff-{csv_file}', this)">+</button>
                    <div id="diff-{csv_file}" style="display:none;">
                        <strong>Differences:</strong>
                        <table border="1">
                            <tr><th width="50%">Primary Key</th><th width="20%">Column</th><th width="10%">File1 Value</th><th width="10%">File2 Value</th><th width="10%">Diff</th></tr>
                            {diff_table}
                        </table>
                        <br>
                        <strong>Additional Details:</strong>
                        <table border="1">
                            <tr><th>Missing Columns in File1</th><th>Missing Columns in File2</th></tr>
                            <tr>
                                <td>{', '.join(file_summary.get('Missing Columns in File1', [])) or 'None'}</td>
                                <td>{', '.join(file_summary.get('Missing Columns in File2', [])) or 'None'}</td>
                            </tr>
                            <tr><th>Missing Rows in File2</th><th>Extra Rows in File2</th></tr>
                            <tr>
                                <td>{file_summary.get('Missing Rows in File2', 0)}</td>
                                <td>{file_summary.get('Extra Rows in File2', 0)}</td>
                            </tr>
                            <tr><th>Duplicate Rows in File1</th><th>Duplicate Rows in File2</th></tr>
                            <tr>
                                <td>{file_summary.get('Duplicate Rows in File1', 0)}</td>
                                <td>{file_summary.get('Duplicate Rows in File2', 0)}</td>
                            </tr>
                            <tr><th>Total Fields Compared</th><th>Discrepancies</th></tr>
                            <tr>
                                <td>{fields}</td>
                                <td>{discrepancies}</td>
                            </tr>
                            <tr><th>Pass %</th><th>Failure %</th></tr>
                            <tr>
                                <td>{pass_percent}%</td>
                                <td>{fail_percent}%</td>
                            </tr>
                        </table>
                    </div>
                </div>
            """
        else:
            mismatch_details = "✅ The files are identical. No differences were found during the comparison."

        comparison_rows += f"""
        <tr>
            <td><i class="fas fa-file-csv" style="color:blue;"></i> {csv_file}</td>
            <td align="center">{icon}</td>
            <td>{mismatch_details}</td>
        </tr>
        """

    if include_missing_files and "Missing CSVs in Source2" in summary:
        total_missing_files = len(summary["Missing CSVs in Source2"])
        for missing_csv in summary["Missing CSVs in Source2"]:
            comparison_rows += f"""
            <tr>
                <td><i class="fas fa-file-csv" style="color:gray;"></i> {missing_csv}</td>
                <td align="center"><i class="fas fa-exclamation-triangle" style="color:orange;"></i></td>
                <td><strong>Missing in destination</strong></td>
            </tr>
            """

    if "Extra CSVs in Source2" in summary:
        for extra_csv in summary["Extra CSVs in Source2"]:
            comparison_rows += f"""
            <tr>
                <td><i class="fas fa-file-csv" style="color:gray;"></i> {extra_csv}</td>
                <td align="center"><i class="fas fa-exclamation-triangle" style="color:blue;"></i></td>
                <td><strong>Extra in destination</strong></td>
            </tr>
            """

    overall_pass = round(sum(pass_percent_list) / len(pass_percent_list), 2) if pass_percent_list else 0.0
    overall_fail = round(sum(fail_percent_list) / len(fail_percent_list), 2) if fail_percent_list else 0.0

    html_template = f"""<!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <title>{project_name} Report</title>
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
        <style>
            body {{ font-family: Arial; background: #f4f4f9; }}
            .container {{ background: white; margin: 20px auto; padding: 20px; max-width: 95%; border-radius: 8px; }}
            header {{ background-color: #173E72; color: white; padding: 10px; text-align: center; }}
            table {{ width: 100%; border-collapse: collapse; margin-top: 15px; word-break: break-word; table-layout: fixed; }}
            th, td {{ border: 1px solid #ccc; padding: 6px; text-align: left; }}
            th {{ background: #173E72; color: white; }}
            tr:nth-child(even) {{ background: #f9f9f9; }}
            .toggle-button {{ font-size: 0.7em; padding: 2px 6px; background-color: #0056b3; color: white; border: none; border-radius: 4px; cursor: pointer; }}
            td {{ vertical-align: top; }}
            header img {{
                height: 60px;  /* Set the height of the logo */
                width: 150px;  /* Set the width of the logo */
            }}
        </style>
        <script>
            function toggleVisibility(id, btn) {{
                var el = document.getElementById(id);
                if (el.style.display === 'none') {{
                    el.style.display = 'block';
                    btn.innerHTML = '-';
                }} else {{
                    el.style.display = 'none';
                    btn.innerHTML = '+';
                }}
            }}
        </script>
    </head>
    <body>
    <header>        
            <table style="border: none;">
                <tr>
                    <td style="border: none;" width="10%">
                        <img src="{project_logo}" alt="{project_name}">
                    </td>
                    <td style="border: none;">
                        <h1>{project_name} - CSV Comparison Report</h1>
                        <p><strong>Generated:</strong> {report_start_time.strftime('%Y-%m-%d %H:%M:%S')}</p>
                    </td>
                </tr>
            </table>
    </header>
    <div class="container">
        <h2>📋 Summary</h2>
        <ul>
            <li><strong>Duration:</strong> {time_taken_str}</li>
            <li><strong>Files on Engine :</strong> {source_files_count}</li>
            <li><strong>Files on Neoprice:</strong> {destination_files_count}</li>
            <li><strong>Primary Keys:</strong> {', '.join(primary_key_columns)}</li>
            <li><strong>Compared Columns:</strong> {"All Columns" if not columns else ', '.join(columns)}</li>
        </ul>

        <h2>📊 Overall Summary</h2>
        <ul>
            <li><strong>Overall Pass %:</strong> <span style="background-color: #d4edda; color: #155724; padding: 2px 6px; border-radius: 4px;">{overall_pass}%</span></li>
            <li><strong>Overall Failure %:</strong> <span style="background-color: #f8d7da; color: #721c24; padding: 2px 6px; border-radius: 4px;">{overall_fail}%</span></li>
            <li><strong>Total Fields Compared:</strong> {total_fields_compared}</li>
            <li><strong>Total Discrepancies:</strong> {total_discrepancies}</li>
            <li><strong>Total Missing Files:</strong> {total_missing_files}</li>
            <li><strong>Total Missing Rows:</strong> {total_missing_rows}</li>
            <li><strong>Total New Rows:</strong> {total_extra_rows}</li>
        </ul>

        <h2>🧾 Comparison Results</h2>
        <table>
            <thead>
                <tr>
                    <th width="20%">CSV File</th>
                    <th width="5%">Status</th>
                    <th>Details</th>
                </tr>
            </thead>
            <tbody>
                {comparison_rows}
            </tbody>
        </table>
    </div>
    </body>
    </html>
    """

    with open(output_file, "w", encoding="utf-8") as f:
        f.write(html_template)

# --- MAIN PROCESS ---
def run_comparison():
    source1_zips = list_zip_files(source_1_prefix)
    source2_zips = list_zip_files(source_2_prefix)

    source1_csv_map = {}
    source2_csv_map = {}

    build_csv_to_zip_map(source1_zips, 'downloads/source1', source1_csv_map)
    build_csv_to_zip_map(source2_zips, 'downloads/source2', source2_csv_map)

    common_csvs = set(source1_csv_map.keys()) & set(source2_csv_map.keys())
    missing_in_source2 = set(source1_csv_map.keys()) - set(source2_csv_map.keys())
    missing_in_source1 = set(source2_csv_map.keys()) - set(source1_csv_map.keys())

    all_diffs = []
    all_summaries = {}

    # Shared lock for tqdm update
    manager = Manager()
    counter = manager.Value('i', 0)
    lock = manager.Lock()

    # Function for threaded progress
    def process_pair(csv_name):
        zip1, file1 = source1_csv_map[csv_name]
        zip2, file2 = source2_csv_map[csv_name]
        df1 = read_csv_from_local_zip(zip1, file1)
        df2 = read_csv_from_local_zip(zip2, file2)
        result = csv_name, *compare_csvs(df1, df2, file1)

        # Thread-safe tqdm update
        with lock:
            counter.value += 1
            pbar.update(1)
        return result

    print(f"🔍 Comparing {len(common_csvs)} common CSV files...")
    with tqdm(total=len(common_csvs), desc="Overall Comparison Progress") as pbar:
        if use_multithreading_comparision:
            with ThreadPoolExecutor(max_workers=1000) as executor:
                results = list(executor.map(process_pair, common_csvs))
        else:
            results = [process_pair(name) for name in common_csvs]

    for csv_name, diff_df, summary in results:
        if not diff_df.empty:
            diff_df['File'] = csv_name
            all_diffs.append(diff_df)
        all_summaries[csv_name] = summary

    if missing_in_source2:
        all_summaries["Missing CSVs in Source2"] = list(missing_in_source2)
    if missing_in_source1:
        all_summaries["Extra CSVs in Source2"] = list(missing_in_source1)

    final_diff_df = pd.concat(all_diffs) if all_diffs else pd.DataFrame()
    list_files = [len(source1_csv_map.keys()), len(source2_csv_map.keys())]
    return final_diff_df, all_summaries, list_files

# --- ENTRY POINT ---
if __name__ == "__main__":
    print('---------------- CSV Comparison Started ----------------')
    logger.info(f"CSV Comparison Started ----------------")
    start_time = datetime.now()
    logger.info(f"Start Time: {start_time}")
    
    diff_df, summary, list_files = run_comparison()
    generate_html_report(
        diff_df=diff_df,
        summary=summary,
        report_start_time=start_time,
        output_file = output_file,
        source_files_count=list_files[0],
        destination_files_count=list_files[1],
        primary_key_columns=csv_primary_keys,
        columns=csv_columns,
        project_name = project_name, 
        project_logo = project_logo, 
        include_passed = include_passed, 
        include_missing_files = include_missing_files
    )
    logger.info(f"CSV Comparison Finished ----------------")
    logger.info(f"Start Time: {datetime.now()}")
