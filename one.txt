import pandas as pd
import zipfile
import tempfile
import os
from concurrent.futures import ThreadPoolExecutor
from multiprocessing import Queue, cpu_count, Process, Manager
from tqdm import tqdm
import multiprocessing as mp
import time

SENTINEL = None
BATCH_SIZE = 4  # You can tune this

# Utility: Chunk list into batches
def chunk_list(lst, chunk_size):
    for i in range(0, len(lst), chunk_size):
        yield lst[i:i + chunk_size]

# Extract ZIP files to a temporary folder
def extract_zip(zip_path):
    with zipfile.ZipFile(zip_path, 'r') as zip_ref:
        temp_dir = tempfile.mkdtemp()
        zip_ref.extractall(temp_dir)
        return temp_dir

# Reader: reads a batch of files and puts them in the queue
def reader_batch_thread(csv_names, source1_map, source2_map, queue, read_pbar, overall_pbar, extract_to_temp=False):
    batch = []
    for csv_name in csv_names:
        zip1, file1 = source1_map[csv_name]
        zip2, file2 = source2_map[csv_name]
        
        if extract_to_temp:
            # Extract the ZIP files to temp folder and read the CSVs
            temp_dir1 = extract_zip(zip1)
            temp_dir2 = extract_zip(zip2)
            df1 = pd.read_csv(os.path.join(temp_dir1, file1))
            df2 = pd.read_csv(os.path.join(temp_dir2, file2))
        else:
            df1 = read_csv_from_local_zip(zip1, file1)
            df2 = read_csv_from_local_zip(zip2, file2)
        
        batch.append((csv_name, file1, df1, df2))
        read_pbar.update(1)
        overall_pbar.update(1)
    queue.put(batch)

# Compare worker: processes a batch of files
def compare_worker(queue, output_list, compare_pbar, overall_pbar):
    while True:
        batch = queue.get()
        if batch is SENTINEL:
            break
        for csv_name, file1, df1, df2 in batch:
            start = time.time()
            print(f"[PID {os.getpid()}] Comparing: {csv_name}")
            diff_df, summary = compare_csvs(df1, df2, file1)
            print(f"[PID {os.getpid()}] Done {csv_name} in {time.time() - start:.2f}s")
            output_list.append((csv_name, diff_df, summary))
            compare_pbar.update(1)
            overall_pbar.update(1)

# Main function
def run_comparison(extract_to_temp=False):
    source1_zips = list_zip_files(source_1_prefix)
    source2_zips = list_zip_files(source_2_prefix)

    source1_csv_map = {}
    source2_csv_map = {}

    build_csv_to_zip_map(source1_zips, 'downloads/source1', source1_csv_map)
    build_csv_to_zip_map(source2_zips, 'downloads/source2', source2_csv_map)

    common_csvs = list(set(source1_csv_map.keys()) & set(source2_csv_map.keys()))
    missing_in_source2 = set(source1_csv_map.keys()) - set(source2_csv_map.keys())
    missing_in_source1 = set(source2_csv_map.keys()) - set(source1_csv_map.keys())

    all_diffs = []
    all_summaries = {}

    print(f"ðŸ”„ Reading and comparing {len(common_csvs)} CSV files in parallel (batch size: {BATCH_SIZE})...")

    queue = mp.Queue(maxsize=cpu_count() * 2)
    manager = Manager()
    output_list = manager.list()

    with tqdm(total=len(common_csvs), desc="Overall Progress", ncols=100) as overall_pbar, \
         tqdm(total=len(common_csvs), desc="Reading Progress", ncols=100) as read_pbar, \
         tqdm(total=len(common_csvs), desc="Comparing Progress", ncols=100) as compare_pbar:

        # Start comparison processes
        num_workers = cpu_count()
        processes = []
        for _ in range(num_workers):
            p = Process(target=compare_worker, args=(queue, output_list, compare_pbar, overall_pbar))
            p.start()
            processes.append(p)

        # Start reader threads (with batching)
        with ThreadPoolExecutor(max_workers=32) as executor:
            futures = [
                executor.submit(
                    reader_batch_thread,
                    chunk,
                    source1_csv_map,
                    source2_csv_map,
                    queue,
                    read_pbar,
                    overall_pbar,
                    extract_to_temp
                )
                for chunk in chunk_list(common_csvs, BATCH_SIZE)
            ]
            for future in futures:
                future.result()

        # Send sentinels to end workers
        for _ in range(num_workers):
            queue.put(SENTINEL)

        for p in processes:
            p.join()

    # Collect results
    for csv_name, diff_df, summary in output_list:
        if not diff_df.empty:
            diff_df['File'] = csv_name
            all_diffs.append(diff_df)
        all_summaries[csv_name] = summary

    if missing_in_source2:
        all_summaries["Missing CSVs in Source2"] = list(missing_in_source2)
    if missing_in_source1:
        all_summaries["Extra CSVs in Source2"] = list(missing_in_source1)

    final_diff_df = pd.concat(all_diffs) if all_diffs else pd.DataFrame()
    list_files = [len(source1_csv_map.keys()), len(source2_csv_map.keys())]
    return final_diff_df, all_summaries, list_files
